<!DOCTYPE html>
<html lang="id">

<head>
   <meta charset="UTF-8">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <title>Dashboard Siswa - E-Learning</title>
   <style>
      * {
         margin: 0;
         padding: 0;
         box-sizing: border-box;
      }

      body {
         font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
         background: #f5f7fa;
         min-height: 100vh;
      }

      .header {
         background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
         color: white;
         padding: 1rem 2rem;
         display: flex;
         justify-content: space-between;
         align-items: center;
         box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      }

      .user-info {
         display: flex;
         align-items: center;
         gap: 1rem;
      }

      .logout-btn {
         background: rgba(255, 255, 255, 0.2);
         border: 1px solid rgba(255, 255, 255, 0.3);
         color: white;
         padding: 0.5rem 1rem;
         border-radius: 5px;
         cursor: pointer;
         transition: background 0.3s;
      }

      .logout-btn:hover {
         background: rgba(255, 255, 255, 0.3);
      }

      .main-content {
         display: grid;
         grid-template-columns: 250px 1fr;
         min-height: calc(100vh - 80px);
      }

      .sidebar {
         background: white;
         box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
         padding: 2rem 0;
      }

      .nav-item {
         padding: 1rem 2rem;
         cursor: pointer;
         transition: all 0.3s;
         border-left: 3px solid transparent;
      }

      .nav-item:hover,
      .nav-item.active {
         background: #f0f8ff;
         border-left-color: #3498db;
         color: #3498db;
      }

      .content-area {
         padding: 2rem;
      }

      .page-section {
         display: none;
      }

      .page-section.active {
         display: block;
      }

      .stats-grid {
         display: grid;
         grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
         gap: 1.5rem;
         margin-bottom: 2rem;
      }

      .stat-card {
         background: white;
         padding: 2rem;
         border-radius: 10px;
         box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
         text-align: center;
      }

      .stat-value {
         font-size: 2.5rem;
         font-weight: bold;
         color: #3498db;
         margin-bottom: 0.5rem;
      }

      .stat-label {
         color: #666;
         font-size: 0.9rem;
      }

      .card {
         background: white;
         border-radius: 10px;
         padding: 2rem;
         margin-bottom: 1.5rem;
         box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      }

      .card-title {
         font-size: 1.2rem;
         font-weight: 600;
         color: #333;
         margin-bottom: 1rem;
      }

      .btn {
         background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
         color: white;
         border: none;
         padding: 0.75rem 1.5rem;
         border-radius: 5px;
         cursor: pointer;
         font-weight: 600;
         transition: transform 0.2s;
         text-decoration: none;
         display: inline-block;
      }

      .btn:hover {
         transform: translateY(-2px);
      }

      .btn-success {
         background: linear-gradient(135deg, #2ecc71 0%, #27ae60 100%);
      }

      .btn-warning {
         background: linear-gradient(135deg, #f39c12 0%, #e67e22 100%);
      }

      .btn-danger {
         background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
      }

      .alert {
         padding: 1rem;
         border-radius: 5px;
         margin-bottom: 1rem;
         display: none;
      }

      .alert-success {
         background: #d4edda;
         color: #155724;
         border: 1px solid #c3e6cb;
      }

      .alert-error {
         background: #f8d7da;
         color: #721c24;
         border: 1px solid #f5c6cb;
      }

      .loading {
         text-align: center;
         padding: 2rem;
         color: #666;
      }

      .diskusi-container {
         background: #f8f9ff;
         border-radius: 10px;
         padding: 1.5rem;
         margin-bottom: 1.5rem;
      }

      .diskusi-item {
         background: white;
         border-radius: 8px;
         padding: 1rem;
         margin-bottom: 1rem;
         border-left: 3px solid #3498db;
      }

      .diskusi-header {
         display: flex;
         justify-content: space-between;
         align-items: center;
         margin-bottom: 0.75rem;
      }

      .diskusi-user {
         color: #3498db;
         font-weight: 600;
         font-size: 0.9rem;
      }

      .diskusi-date {
         color: #666;
         font-size: 0.8rem;
      }

      .diskusi-content {
         color: #333;
         line-height: 1.5;
      }

      /* Materi Cards */
      .materi-grid {
         display: grid;
         grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
         gap: 1.5rem;
         margin-top: 1rem;
      }

      .materi-card {
         background: white;
         border-radius: 10px;
         box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
         padding: 1.5rem;
         transition: transform 0.2s, box-shadow 0.2s;
      }

      .materi-card:hover {
         transform: translateY(-2px);
         box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
      }

      .materi-title {
         color: #3498db;
         font-size: 1.1rem;
         font-weight: 600;
         margin-bottom: 0.75rem;
      }

      .materi-guru {
         color: #666;
         font-size: 0.9rem;
         margin-bottom: 1rem;
      }

      .materi-content {
         color: #333;
         line-height: 1.5;
         margin-bottom: 1.5rem;
         display: -webkit-box;
         -webkit-line-clamp: 3;
         line-clamp: 3;
         -webkit-box-orient: vertical;
         overflow: hidden;
      }

      /* Tugas Cards */
      .tugas-grid {
         display: grid;
         grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
         gap: 1.5rem;
         margin-top: 1rem;
      }

      .tugas-card {
         background: white;
         border-radius: 10px;
         box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
         padding: 1.5rem;
         border-left: 4px solid #3498db;
      }

      .tugas-header {
         display: flex;
         justify-content: space-between;
         align-items: flex-start;
         margin-bottom: 1rem;
      }

      .tugas-title {
         color: #333;
         font-size: 1.1rem;
         font-weight: 600;
      }

      .tugas-status {
         padding: 0.25rem 0.75rem;
         border-radius: 15px;
         font-size: 0.8rem;
         font-weight: 600;
         text-transform: capitalize;
      }

      .status-belum_dikerjakan {
         background: #ffeaa7;
         color: #d63031;
      }

      .status-dikerjakan {
         background: #74b9ff;
         color: white;
      }

      .status-selesai {
         background: #00b894;
         color: white;
      }

      .tugas-materi {
         color: #3498db;
         font-size: 0.9rem;
         margin-bottom: 0.5rem;
      }

      .tugas-deadline {
         color: #e74c3c;
         font-size: 0.9rem;
         margin-bottom: 1rem;
      }

      .tugas-description {
         color: #666;
         line-height: 1.5;
         margin-bottom: 1.5rem;
      }

      .tugas-nilai {
         background: #f8f9ff;
         padding: 1rem;
         border-radius: 5px;
         margin-bottom: 1rem;
      }

      /* Progress Bar */
      .progress-container {
         background: #f8f9ff;
         border-radius: 10px;
         padding: 1.5rem;
         margin-bottom: 1.5rem;
      }

      .progress-bar {
         background: #e1e5e9;
         border-radius: 10px;
         height: 20px;
         margin: 1rem 0;
         overflow: hidden;
      }

      .progress-fill {
         height: 100%;
         background: linear-gradient(90deg, #3498db, #2980b9);
         transition: width 0.3s ease;
         display: flex;
         align-items: center;
         justify-content: center;
         color: white;
         font-weight: 600;
         font-size: 0.8rem;
      }

      /* Modal Styles */
      .modal-overlay {
         position: fixed;
         top: 0;
         left: 0;
         width: 100%;
         height: 100%;
         background: rgba(0, 0, 0, 0.5);
         display: flex;
         justify-content: center;
         align-items: center;
         z-index: 1000;
      }

      .modal-content {
         background: white;
         border-radius: 10px;
         width: 90%;
         max-width: 600px;
         max-height: 80vh;
         overflow-y: auto;
         box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
      }

      .modal-header {
         display: flex;
         justify-content: space-between;
         align-items: center;
         padding: 1.5rem;
         border-bottom: 1px solid #e1e5e9;
      }

      .modal-header h3 {
         margin: 0;
         color: #333;
      }

      .modal-close {
         background: none;
         border: none;
         font-size: 1.5rem;
         cursor: pointer;
         color: #666;
         padding: 0;
         width: 30px;
         height: 30px;
         display: flex;
         align-items: center;
         justify-content: center;
      }

      .modal-close:hover {
         color: #333;
      }

      .modal-body {
         padding: 1.5rem;
      }

      .form-group {
         margin-bottom: 1rem;
      }

      .form-group label {
         display: block;
         margin-bottom: 0.5rem;
         color: #333;
         font-weight: 500;
      }

      .form-group input,
      .form-group textarea,
      .form-group select {
         width: 100%;
         padding: 0.75rem;
         border: 2px solid #e1e5e9;
         border-radius: 5px;
         font-size: 1rem;
      }

      .form-group textarea {
         resize: vertical;
         min-height: 100px;
      }

      .nilai-badge {
         display: inline-block;
         background: linear-gradient(135deg, #3498db, #2980b9);
         color: white;
         padding: 0.5rem 1rem;
         border-radius: 20px;
         font-weight: 600;
         font-size: 1.1rem;
      }

      .no-data {
         text-align: center;
         padding: 2rem;
         color: #666;
         background: #f8f9ff;
         border-radius: 10px;
         margin: 1rem 0;
      }
   </style>
</head>

<body>
   <div class="header">
      <div>
         <h1>Dashboard Siswa</h1>
         <p>Sistem Pembelajaran E-Learning</p>
      </div>
      <div class="user-info">
         <span>Selamat datang, <span id="userName">Siswa</span></span>
         <button class="logout-btn" onclick="logout()">Logout</button>
      </div>
   </div>

   <div class="main-content">
      <div class="sidebar">
         <div class="nav-item active" onclick="showSection('dashboard')">📊 Dashboard</div>
         <div class="nav-item" onclick="showSection('materi-pembelajaran')">📚 Materi Pembelajaran</div>
         <div class="nav-item" onclick="showSection('tugas-saya')">📝 Tugas Saya</div>
         <div class="nav-item" onclick="showSection('nilai-saya')">🎯 Nilai Saya</div>
         <div class="nav-item" onclick="showSection('diskusi')">💬 Diskusi</div>
         <div class="nav-item" onclick="showSection('progress')">📈 Progress Belajar</div>
      </div>

      <div class="content-area">
         <div id="alert" class="alert">
            <span id="alertMessage"></span>
         </div>

         <!-- Dashboard Section -->
         <div id="dashboard" class="page-section active">
            <h2>Ringkasan Pembelajaran</h2>

            <div class="stats-grid">
               <div class="stat-card">
                  <div class="stat-value" id="totalMateri">0</div>
                  <div class="stat-label">Materi Tersedia</div>
               </div>
               <div class="stat-card">
                  <div class="stat-value" id="tugasSelesai">0</div>
                  <div class="stat-label">Tugas Selesai</div>
               </div>
               <div class="stat-card">
                  <div class="stat-value" id="tugasPending">0</div>
                  <div class="stat-label">Tugas Pending</div>
               </div>
               <div class="stat-card">
                  <div class="stat-value" id="rataRataNilai">0</div>
                  <div class="stat-label">Rata-rata Nilai</div>
               </div>
            </div>

            <div class="progress-container">
               <h3 style="color: #3498db; margin-bottom: 1rem;">Progress Pembelajaran Anda</h3>
               <div class="progress-bar">
                  <div class="progress-fill" id="overallProgress" style="width: 0%">0%</div>
               </div>
               <p style="color: #666; margin-top: 0.5rem;">Terus semangat belajar!</p>
            </div>

            <div class="card">
               <div class="card-title">Tugas Terbaru</div>
               <div id="recentTugas">
                  <div class="loading">Loading tugas terbaru...</div>
               </div>
            </div>
         </div>

         <!-- Materi Section -->
         <div id="materi-pembelajaran" class="page-section">
            <h2>Materi Pembelajaran</h2>
            <div class="materi-grid" id="materiGrid">
               <div class="loading">Loading materi pembelajaran...</div>
            </div>
         </div>

         <!-- Tugas Section -->
         <div id="tugas-saya" class="page-section">
            <h2>Daftar Tugas</h2>
            <div class="tugas-grid" id="tugasGrid">
               <div class="loading">Loading daftar tugas...</div>
            </div>
         </div>

         <!-- Nilai Section -->
         <div id="nilai-saya" class="page-section">
            <h2>Nilai dan Hasil Pembelajaran</h2>

            <div class="card">
               <div class="card-title">Ringkasan Nilai</div>
               <div id="nilaiSummary">
                  <div class="loading">Loading ringkasan nilai...</div>
               </div>
            </div>

            <div class="card">
               <div class="card-title">Detail Nilai per Tugas</div>
               <div id="detailNilai">
                  <div class="loading">Loading detail nilai...</div>
               </div>
            </div>
         </div>

         <!-- Diskusi Section -->
         <div id="diskusi" class="page-section">
            <h2>Diskusi Pembelajaran</h2>

            <div class="card">
               <div class="card-title">Diskusi Kelas</div>
               <div id="diskusiKelas">
                  <div class="loading">Loading diskusi kelas...</div>
               </div>
            </div>

            <div class="card">
               <div class="card-title">Diskusi Materi</div>
               <div id="diskusiMateri">
                  <div class="loading">Loading diskusi materi...</div>
               </div>
            </div>
         </div>

         <!-- Progress Section -->
         <div id="progress" class="page-section">
            <h2>Progress Belajar Detail</h2>

            <div class="card">
               <div class="card-title">Statistik Pembelajaran</div>
               <div id="progressDetail">
                  <div class="loading">Loading progress detail...</div>
               </div>
            </div>
         </div>
      </div>
   </div>

   <script>
      let materiData = [];
      let tugasData = [];
      let nilaiData = [];

      // Utility Functions
      function showAlert(message, type = 'success') {
         const alert = document.getElementById('alert');
         const alertMessage = document.getElementById('alertMessage');

         alert.className = `alert alert-${type}`;
         alertMessage.textContent = message;
         alert.style.display = 'block';

         setTimeout(() => {
            alert.style.display = 'none';
         }, 5000);
      }

      function showSection(sectionId) {
         // Hide all sections
         document.querySelectorAll('.page-section').forEach(section => {
            section.classList.remove('active');
         });

         // Remove active from all nav items
         document.querySelectorAll('.nav-item').forEach(item => {
            item.classList.remove('active');
         });

         // Show selected section
         document.getElementById(sectionId).classList.add('active');
         event.target.classList.add('active');

         // Load data based on section
         switch (sectionId) {
            case 'materi-pembelajaran':
               loadMateriPembelajaran();
               break;
            case 'tugas-saya':
               loadTugasSaya();
               break;
            case 'nilai-saya':
               loadNilaiSaya();
               break;
            case 'diskusi':
               loadDiskusi();
               break;
            case 'progress':
               loadProgressDetail();
               break;
         }
      }

      // API Functions
      async function apiCall(endpoint, options = {}) {
         try {
            const response = await fetch(endpoint, {
               credentials: 'include',
               ...options
            });

            if (!response.ok) {
               throw new Error(`HTTP ${response.status}`);
            }

            return await response.json();
         } catch (error) {
            console.error(`API call failed: ${endpoint}`, error);
            throw error;
         }
      }

      // Dashboard Functions
      async function loadDashboardData() {
         try {
            const result = await apiCall('/siswa/dashboard-stats');

            if (result.success) {
               updateDashboardStats(result.data);
            } else {
               showAlert(result.error || 'Gagal memuat statistik dashboard', 'error');
            }
         } catch (error) {
            console.error('Error loading dashboard:', error);
            showAlert('Terjadi kesalahan saat memuat dashboard', 'error');
         }

         // Load recent tugas
         loadRecentTugas();
      }

      function updateDashboardStats(data) {
         document.getElementById('totalMateri').textContent = data.total_materi || 0;
         document.getElementById('tugasSelesai').textContent = data.tugas_selesai || 0;
         document.getElementById('tugasPending').textContent = data.tugas_pending || 0;
         document.getElementById('rataRataNilai').textContent = Math.round(data.rata_nilai || 0);

         const progress = data.overall_progress || 0;
         const progressBar = document.getElementById('overallProgress');
         progressBar.style.width = progress + '%';
         progressBar.textContent = Math.round(progress) + '%';
      }

      async function loadRecentTugas() {
         try {
            const result = await apiCall('/siswa/tugas-recent');

            if (result.success && result.data.length > 0) {
               displayRecentTugas(result.data);
            } else {
               document.getElementById('recentTugas').innerHTML = '<div class="no-data">Tidak ada tugas terbaru</div>';
            }
         } catch (error) {
            console.error('Error loading recent tugas:', error);
            document.getElementById('recentTugas').innerHTML = '<div class="no-data">Gagal memuat tugas terbaru</div>';
         }
      }

      function displayRecentTugas(tugasList) {
         const container = document.getElementById('recentTugas');

         container.innerHTML = tugasList.map(tugas => `
            <div class="diskusi-item">
               <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
                  <h4 style="color: #333; margin: 0;">${tugas.judul}</h4>
                  <span class="tugas-status status-${tugas.status}">${tugas.status.replace('_', ' ')}</span>
               </div>
               <p style="color: #666; margin: 0.5rem 0; font-size: 0.9rem;">Materi: ${tugas.materi_judul}</p>
               <p style="color: #e74c3c; margin: 0; font-size: 0.8rem;">
                  Deadline: ${tugas.deadline ? new Date(tugas.deadline).toLocaleDateString('id-ID') : '-'}
               </p>
            </div>
         `).join('');
      }

      // Materi Functions
      async function loadMateriPembelajaran() {
         const container = document.getElementById('materiGrid');
         container.innerHTML = '<div class="loading">Loading materi pembelajaran...</div>';

         try {
            const result = await apiCall('/siswa/materi');

            if (result.success) {
               materiData = result.data;
               displayMateriGrid();
            } else {
               container.innerHTML = `<div class="no-data">${result.error || 'Gagal memuat materi pembelajaran'}</div>`;
               showAlert(result.error || 'Gagal memuat materi', 'error');
            }
         } catch (error) {
            console.error('Error loading materi:', error);
            container.innerHTML = '<div class="no-data">Terjadi kesalahan jaringan</div>';
            showAlert('Terjadi kesalahan saat memuat materi', 'error');
         }
      }

      function displayMateriGrid() {
         const container = document.getElementById('materiGrid');

         if (!materiData || materiData.length === 0) {
            container.innerHTML = '<div class="no-data">Belum ada materi pembelajaran tersedia untuk kelas Anda</div>';
            return;
         }

         container.innerHTML = materiData.map(materi => `
            <div class="materi-card">
               <div class="materi-title">${materi.judul}</div>
               <div class="materi-guru">Guru: ${materi.guru_nama}</div>
               ${materi.deskripsi ? `
                  <div style="color: #666; font-size: 0.9rem; margin-bottom: 1rem;">
                     ${materi.deskripsi}
                  </div>
               ` : ''}
               <div class="materi-content">${materi.konten}</div>
               <div style="display: flex; gap: 10px; margin-top: 1.5rem;">
                  <button class="btn" onclick="bacaMateri(${materi.id})">Baca Materi</button>
                  <button class="btn btn-warning" onclick="lihatDiskusiMateri(${materi.id}, '${materi.judul}')">Diskusi</button>
               </div>
               <div style="font-size: 0.8rem; color: #888; margin-top: 1rem;">
                  Dibuat: ${new Date(materi.created_at).toLocaleDateString('id-ID')}
               </div>
            </div>
         `).join('');
      }

      // Tugas Functions
      async function loadTugasSaya() {
         const container = document.getElementById('tugasGrid');
         container.innerHTML = '<div class="loading">Loading daftar tugas...</div>';

         try {
            const result = await apiCall('/siswa/tugas');

            if (result.success) {
               tugasData = result.data;
               displayTugasGrid();
            } else {
               container.innerHTML = `<div class="no-data">${result.error || 'Gagal memuat tugas'}</div>`;
               showAlert(result.error || 'Gagal memuat tugas', 'error');
            }
         } catch (error) {
            console.error('Error loading tugas:', error);
            container.innerHTML = '<div class="no-data">Terjadi kesalahan jaringan</div>';
            showAlert('Terjadi kesalahan saat memuat tugas', 'error');
         }
      }

      function displayTugasGrid() {
         const container = document.getElementById('tugasGrid');

         if (!tugasData || tugasData.length === 0) {
            container.innerHTML = '<div class="no-data">Belum ada tugas yang tersedia untuk kelas Anda</div>';
            return;
         }

         container.innerHTML = tugasData.map(tugas => `
            <div class="tugas-card">
               <div class="tugas-header">
                  <div class="tugas-title">${tugas.judul}</div>
                  <span class="tugas-status status-${tugas.status}">
                     ${tugas.status.replace('_', ' ')}
                  </span>
               </div>
               <div class="tugas-materi">Materi: ${tugas.materi_judul}</div>
               <div class="tugas-deadline">
                  Deadline: ${tugas.deadline ? new Date(tugas.deadline).toLocaleDateString('id-ID') : '-'}
               </div>
               <div class="tugas-description">${tugas.deskripsi || 'Tidak ada deskripsi'}</div>
               
               ${tugas.nilai !== undefined && tugas.nilai !== null ? `
                  <div class="tugas-nilai">
                     <span class="nilai-badge">Nilai: ${tugas.nilai}/100</span>
                     ${tugas.feedback ? `
                        <p style="margin-top: 0.5rem; color: #666; font-style: italic;">
                           Feedback: ${tugas.feedback}
                        </p>
                     ` : ''}
                  </div>
               ` : ''}
               
               <div style="display: flex; gap: 10px; margin-top: 1rem;">
                  ${tugas.status === 'belum_dikerjakan' ?
               `<button class="btn btn-success" onclick="kerjakanTugas(${tugas.id})">Kerjakan</button>` :
               tugas.status === 'dikerjakan' ?
                  `<button class="btn btn-warning" onclick="editJawaban(${tugas.id})">Edit Jawaban</button>` :
                  `<button class="btn" onclick="lihatJawaban(${tugas.id})">Lihat Jawaban</button>`
            }
                  <button class="btn" onclick="lihatDetailTugas(${tugas.id})">Detail</button>
               </div>
            </div>
         `).join('');
      }

      // Nilai Functions
      async function loadNilaiSaya() {
         const summaryContainer = document.getElementById('nilaiSummary');
         const detailContainer = document.getElementById('detailNilai');

         summaryContainer.innerHTML = '<div class="loading">Loading ringkasan nilai...</div>';
         detailContainer.innerHTML = '<div class="loading">Loading detail nilai...</div>';

         try {
            const result = await apiCall('/siswa/nilai');

            if (result.success) {
               nilaiData = result.data;
               displayNilai();
            } else {
               summaryContainer.innerHTML = `<div class="no-data">${result.error || 'Gagal memuat nilai'}</div>`;
               detailContainer.innerHTML = '';
               showAlert(result.error || 'Gagal memuat nilai', 'error');
            }
         } catch (error) {
            console.error('Error loading nilai:', error);
            summaryContainer.innerHTML = '<div class="no-data">Terjadi kesalahan jaringan</div>';
            detailContainer.innerHTML = '';
            showAlert('Terjadi kesalahan saat memuat nilai', 'error');
         }
      }

      function displayNilai() {
         const summaryContainer = document.getElementById('nilaiSummary');
         const detailContainer = document.getElementById('detailNilai');

         if (!nilaiData || nilaiData.length === 0) {
            summaryContainer.innerHTML = '<div class="no-data">Belum ada nilai yang tersedia</div>';
            detailContainer.innerHTML = '<div class="no-data">Belum ada tugas yang dinilai</div>';
            return;
         }

         // Calculate summary
         const totalTugas = nilaiData.length;
         const tugasDinilai = nilaiData.filter(n => n.nilai !== undefined && n.nilai !== null).length;
         const rataRata = tugasDinilai > 0 ?
            nilaiData.filter(n => n.nilai !== undefined && n.nilai !== null)
               .reduce((sum, n) => sum + n.nilai, 0) / tugasDinilai : 0;

         summaryContainer.innerHTML = `
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem;">
               <div style="text-align: center; background: #f8f9ff; padding: 1rem; border-radius: 8px;">
                  <div style="font-size: 2rem; font-weight: bold; color: #3498db;">${totalTugas}</div>
                  <div style="color: #666;">Total Tugas</div>
               </div>
               <div style="text-align: center; background: #f8f9ff; padding: 1rem; border-radius: 8px;">
                  <div style="font-size: 2rem; font-weight: bold; color: #3498db;">${tugasDinilai}</div>
                  <div style="color: #666;">Sudah Dinilai</div>
               </div>
               <div style="text-align: center; background: #f8f9ff; padding: 1rem; border-radius: 8px;">
                  <div style="font-size: 2rem; font-weight: bold; color: #3498db;">${Math.round(rataRata)}</div>
                  <div style="color: #666;">Rata-rata</div>
               </div>
            </div>
         `;

         // Display detail
         detailContainer.innerHTML = nilaiData.map(nilai => `
            <div class="diskusi-item">
               <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
                  <h4 style="margin: 0; color: #333;">${nilai.tugas_judul}</h4>
                  ${nilai.nilai !== undefined && nilai.nilai !== null ?
               `<span class="nilai-badge">${nilai.nilai}/100</span>` :
               `<span style="color: #e74c3c; font-weight: 600;">Belum Dinilai</span>`
            }
               </div>
               <p style="color: #666; margin: 0.25rem 0; font-size: 0.9rem;">Materi: ${nilai.materi_judul}</p>
               <p style="color: #666; margin: 0.25rem 0; font-size: 0.9rem;">
                  Dikumpulkan: ${nilai.submitted_at ? new Date(nilai.submitted_at).toLocaleDateString('id-ID') : '-'}
               </p>
               ${nilai.feedback ? `
                  <p style="color: #555; margin-top: 0.5rem; font-style: italic; background: white; padding: 0.5rem; border-radius: 4px;">
                     Feedback: ${nilai.feedback}
                  </p>
               ` : ''}
            </div>
         `).join('');
      }

      // Diskusi Functions
      async function loadDiskusi() {
         try {
            await Promise.all([
               loadDiskusiKelas(),
               loadDiskusiMateri()
            ]);
         } catch (error) {
            console.error('Error loading diskusi:', error);
            showAlert('Terjadi kesalahan saat memuat diskusi', 'error');
         }
      }

      async function loadDiskusiKelas() {
         const container = document.getElementById('diskusiKelas');
         container.innerHTML = '<div class="loading">Loading diskusi kelas...</div>';

         try {
            const result = await apiCall('/siswa/diskusi-kelas');

            if (result.success) {
               displayDiskusiKelas(result.data);
            } else {
               container.innerHTML = `<div class="no-data">${result.error || 'Gagal memuat diskusi kelas'}</div>`;
            }
         } catch (error) {
            console.error('Error loading diskusi kelas:', error);
            container.innerHTML = '<div class="no-data">Terjadi kesalahan jaringan</div>';
         }
      }

      async function loadDiskusiMateri() {
         const container = document.getElementById('diskusiMateri');
         container.innerHTML = '<div class="loading">Loading diskusi materi...</div>';

         try {
            const result = await apiCall('/siswa/diskusi-materi');

            if (result.success) {
               displayDiskusiMateri(result.data);
            } else {
               container.innerHTML = `<div class="no-data">${result.error || 'Gagal memuat diskusi materi'}</div>`;
            }
         } catch (error) {
            console.error('Error loading diskusi materi:', error);
            container.innerHTML = '<div class="no-data">Terjadi kesalahan jaringan</div>';
         }
      }

      function displayDiskusiKelas(diskusiKelas) {
         const container = document.getElementById('diskusiKelas');

         if (!diskusiKelas || diskusiKelas.length === 0) {
            container.innerHTML = `
               <div class="no-data">
                  <p>Belum ada diskusi di kelas Anda</p>
                  <button class="btn" onclick="tambahDiskusiKelas()" style="margin-top: 1rem;">
                     Mulai Diskusi
                  </button>
               </div>
            `;
            return;
         }

         container.innerHTML = `
            <div style="margin-bottom: 1.5rem;">
               <button class="btn" onclick="tambahDiskusiKelas()">
                  + Tambah Diskusi Kelas
               </button>
            </div>
            ${diskusiKelas.map(diskusi => `
               <div class="diskusi-item">
                  <div class="diskusi-header">
                     <span class="diskusi-user">${diskusi.user_name} (${diskusi.user_role})</span>
                     <span class="diskusi-date">${new Date(diskusi.created_at).toLocaleString('id-ID')}</span>
                  </div>
                  <div class="diskusi-content">${diskusi.isi}</div>
                  <div style="font-size: 0.8rem; color: #666; margin-top: 0.5rem;">
                     Kelas: ${diskusi.kelas}
                  </div>
               </div>
            `).join('')}
         `;
      }

      function displayDiskusiMateri(diskusiMateri) {
         const container = document.getElementById('diskusiMateri');

         if (!diskusiMateri || diskusiMateri.length === 0) {
            container.innerHTML = `
               <div class="no-data">
                  <p>Belum ada diskusi untuk materi Anda</p>
                  <button class="btn" onclick="tambahDiskusiMateri()" style="margin-top: 1rem;">
                     Mulai Diskusi Materi
                  </button>
               </div>
            `;
            return;
         }

         // Group by materi
         const groupedDiskusi = diskusiMateri.reduce((acc, diskusi) => {
            if (!acc[diskusi.materi_judul]) {
               acc[diskusi.materi_judul] = [];
            }
            acc[diskusi.materi_judul].push(diskusi);
            return acc;
         }, {});

         container.innerHTML = Object.entries(groupedDiskusi).map(([materiJudul, diskusiList]) => `
            <div class="diskusi-container">
               <h3 style="color: #3498db; margin-bottom: 1rem;">${materiJudul}</h3>
               ${diskusiList.map(diskusi => `
                  <div class="diskusi-item">
                     <div class="diskusi-header">
                        <span class="diskusi-user">${diskusi.user_name} (${diskusi.user_role})</span>
                        <span class="diskusi-date">${new Date(diskusi.created_at).toLocaleString('id-ID')}</span>
                     </div>
                     <div class="diskusi-content">${diskusi.isi}</div>
                     ${diskusi.parent_id ? `
                        <div style="font-size: 0.8rem; color: #666; margin-top: 0.5rem;">
                           ↪ Balasan untuk diskusi #${diskusi.parent_id}
                        </div>
                     ` : ''}
                  </div>
               `).join('')}
               <button class="btn" onclick="tambahDiskusiMateri('${diskusiList[0].materi_id}', '${materiJudul}')" style="margin-top: 1rem;">
                  Tambah Komentar
               </button>
            </div>
         `).join('');
      }

      // Progress Functions
      async function loadProgressDetail() {
         const container = document.getElementById('progressDetail');
         container.innerHTML = '<div class="loading">Loading progress detail...</div>';

         try {
            const result = await apiCall('/siswa/progress-detail');

            if (result.success) {
               displayProgressDetail(result.data);
            } else {
               container.innerHTML = `<div class="no-data">${result.error || 'Gagal memuat progress detail'}</div>`;
               showAlert(result.error || 'Gagal memuat progress', 'error');
            }
         } catch (error) {
            console.error('Error loading progress detail:', error);
            container.innerHTML = '<div class="no-data">Terjadi kesalahan jaringan</div>';
            showAlert('Terjadi kesalahan saat memuat progress detail', 'error');
         }
      }

      function displayProgressDetail(progressData) {
         const container = document.getElementById('progressDetail');

         container.innerHTML = `
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1.5rem;">
               <div style="background: #f8f9ff; padding: 1.5rem; border-radius: 10px; text-align: center;">
                  <h4 style="color: #3498db; margin-bottom: 1rem;">Materi Dipelajari</h4>
                  <div style="font-size: 2.5rem; font-weight: bold; color: #3498db; margin-bottom: 0.5rem;">
                     ${progressData.materi_dipelajari || 0}
                  </div>
                  <div style="color: #666;">dari ${progressData.total_materi || 0} materi</div>
                  <div class="progress-bar" style="margin-top: 1rem;">
                     <div class="progress-fill" style="width: ${progressData.progress_materi || 0}%">
                        ${Math.round(progressData.progress_materi || 0)}%
                     </div>
                  </div>
               </div>
               
               <div style="background: #f8f9ff; padding: 1.5rem; border-radius: 10px; text-align: center;">
                  <h4 style="color: #3498db; margin-bottom: 1rem;">Tugas Selesai</h4>
                  <div style="font-size: 2.5rem; font-weight: bold; color: #3498db; margin-bottom: 0.5rem;">
                     ${progressData.tugas_selesai || 0}
                  </div>
                  <div style="color: #666;">dari ${progressData.total_tugas || 0} tugas</div>
                  <div class="progress-bar" style="margin-top: 1rem;">
                     <div class="progress-fill" style="width: ${progressData.progress_tugas || 0}%">
                        ${Math.round(progressData.progress_tugas || 0)}%
                     </div>
                  </div>
               </div>
               
               <div style="background: #f8f9ff; padding: 1.5rem; border-radius: 10px; text-align: center;">
                  <h4 style="color: #3498db; margin-bottom: 1rem;">Nilai Rata-rata</h4>
                  <div style="font-size: 2.5rem; font-weight: bold; color: #3498db; margin-bottom: 0.5rem;">
                     ${Math.round(progressData.rata_nilai || 0)}
                  </div>
                  <div style="color: #666;">dari 100</div>
                  <div class="progress-bar" style="margin-top: 1rem;">
                     <div class="progress-fill" style="width: ${progressData.rata_nilai || 0}%">
                        ${Math.round(progressData.rata_nilai || 0)}%
                     </div>
                  </div>
               </div>
            </div>
         `;
      }

      // Modal Functions
      async function bacaMateri(materiId) {
         try {
            const result = await apiCall(`/siswa/materi/${materiId}`);

            if (result.success) {
               showMateriModal(result.data, materiId);
            } else {
               showAlert(result.error || 'Materi tidak ditemukan', 'error');
            }
         } catch (error) {
            console.error('Error loading materi detail:', error);
            showAlert('Terjadi kesalahan saat memuat materi', 'error');
         }
      }

      function showMateriModal(materi, materiId) {
         const modal = document.createElement('div');
         modal.className = 'modal-overlay';
         modal.innerHTML = `
      <div class="modal-content">
         <div class="modal-header">
            <h3>${materi.judul}</h3>
            <button class="modal-close" onclick="closeModal()">&times;</button>
         </div>
         <div class="modal-body">
            <p style="color: #666; margin-bottom: 1rem;">
               <strong>Guru:</strong> ${materi.guru_nama}
            </p>
            ${materi.deskripsi ? `
               <div style="background: #f8f9ff; padding: 1rem; border-radius: 5px; margin-bottom: 1rem;">
                  <strong>Deskripsi:</strong><br>
                  ${materi.deskripsi}
               </div>
            ` : ''}
            <div style="line-height: 1.6; color: #333; max-height: 60vh; overflow-y: auto;" id="materiContent">
               ${materi.konten.replace(/\n/g, '<br>')}
            </div>
            <div style="margin-top: 1rem; font-size: 0.8rem; color: #888;">
               Diperbarui: ${new Date(materi.updated_at || materi.created_at).toLocaleDateString('id-ID')}
            </div>
            <div id="readStatus" style="background: #fff3cd; padding: 1rem; border-radius: 5px; margin-top: 1rem; text-align: center; border: 1px solid #ffeaa7;">
               <small style="color: #856404;">📖 Scroll sampai bawah untuk menandai materi sebagai sudah dibaca</small>
            </div>
         </div>
      </div>
   `;
         document.body.appendChild(modal);

         // Track scroll untuk memastikan user benar-benar membaca
         const materiContent = modal.querySelector('#materiContent');
         const readStatus = modal.querySelector('#readStatus');
         let hasScrolledToBottom = false;
         let isMarkedAsRead = false;

         materiContent.addEventListener('scroll', async function () {
            const scrollTop = this.scrollTop;
            const scrollHeight = this.scrollHeight;
            const clientHeight = this.clientHeight;

            // Jika user scroll mendekati akhir konten (90%) dan belum ditandai sebagai dibaca
            if (scrollTop + clientHeight >= scrollHeight * 0.9 && !isMarkedAsRead) {
               hasScrolledToBottom = true;
               isMarkedAsRead = true;

               // Mark as read via API
               try {
                  const readResult = await apiCall(`/siswa/materi/${materiId}/read`, {
                     method: 'POST'
                  });

                  if (readResult.success) {
                     readStatus.innerHTML = '<small style="color: #2d5016;">✅ Materi telah ditandai sebagai sudah dibaca! Progress Anda akan diperbarui.</small>';
                     readStatus.style.background = '#d4edda';
                     readStatus.style.borderColor = '#c3e6cb';

                     // Refresh progress immediately
                     setTimeout(() => {
                        loadDashboardData();
                        if (document.getElementById('progress').classList.contains('active')) {
                           loadProgressDetail();
                        }
                     }, 1000);
                  }
               } catch (error) {
                  console.error('Error marking material as read:', error);
                  readStatus.innerHTML = '<small style="color: #721c24;">❌ Gagal menandai sebagai sudah dibaca</small>';
                  readStatus.style.background = '#f8d7da';
                  readStatus.style.borderColor = '#f5c6cb';
               }
            }
         });

         // Also mark as read when modal is closed (if scrolled to bottom)
         modal.addEventListener('click', function (e) {
            if (e.target.classList.contains('modal-overlay') || e.target.classList.contains('modal-close')) {
               if (hasScrolledToBottom && !isMarkedAsRead) {
                  // Mark as read before closing
                  markMaterialAsRead(materiId);
               }
            }
         });
      }

      // Helper function to mark material as read
      async function markMaterialAsRead(materiId) {
         try {
            const result = await apiCall(`/siswa/materi/${materiId}/read`, {
               method: 'POST'
            });

            if (result.success) {
               // Refresh progress
               setTimeout(() => {
                  loadDashboardData();
                  if (document.getElementById('progress').classList.contains('active')) {
                     loadProgressDetail();
                  }
               }, 1000);
            }
         } catch (error) {
            console.error('Error marking material as read:', error);
         }
      }

      // Tugas Modal Functions
      function kerjakanTugas(tugasId) {
         const tugas = tugasData.find(t => t.id === tugasId);
         if (tugas) {
            showTugasModal(tugas, 'kerjakan');
         }
      }

      function editJawaban(tugasId) {
         const tugas = tugasData.find(t => t.id === tugasId);
         if (tugas) {
            showTugasModal(tugas, 'edit');
         }
      }

      function showTugasModal(tugas, mode) {
         const modal = document.createElement('div');
         modal.className = 'modal-overlay';
         modal.innerHTML = `
            <div class="modal-content">
               <div class="modal-header">
                  <h3>${mode === 'kerjakan' ? 'Kerjakan' : 'Edit'} Tugas: ${tugas.judul}</h3>
                  <button class="modal-close" onclick="closeModal()">&times;</button>
               </div>
               <div class="modal-body">
                  <p style="color: #666; margin-bottom: 1rem;"><strong>Materi:</strong> ${tugas.materi_judul}</p>
                  <p style="color: #e74c3c; margin-bottom: 1rem;"><strong>Deadline:</strong> ${tugas.deadline ? new Date(tugas.deadline).toLocaleDateString('id-ID') : '-'}</p>
                  <div style="background: #f8f9ff; padding: 1rem; border-radius: 5px; margin-bottom: 1rem;">
                     <strong>Deskripsi Tugas:</strong><br>
                     ${tugas.deskripsi}
                  </div>
                  
                  <form id="tugasForm">
                     <div class="form-group">
                        <label for="tugasJawaban">Jawaban Anda:</label>
                        <textarea id="tugasJawaban" name="jawaban" placeholder="Masukkan jawaban Anda di sini..." required>${tugas.jawaban || ''}</textarea>
                     </div>
                     <div style="text-align: right; margin-top: 1rem;">
                        <button type="button" onclick="closeModal()" style="margin-right: 10px; background: #95a5a6; color: white; border: none; padding: 0.5rem 1rem; border-radius: 5px; cursor: pointer;">Batal</button>
                        <button type="submit" class="btn">Simpan Jawaban</button>
                     </div>
                  </form>
               </div>
            </div>
         `;
         document.body.appendChild(modal);

         // Handle form submission
         document.getElementById('tugasForm').addEventListener('submit', async function (e) {
            e.preventDefault();
            const jawaban = document.getElementById('tugasJawaban').value;

            try {
               const result = await apiCall(`/siswa/tugas/${tugas.id}/submit`, {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({ jawaban })
               });

               if (result.success) {
                  showAlert('Jawaban berhasil disimpan!');
                  closeModal();
                  loadTugasSaya();
                  loadDashboardData();
               } else {
                  showAlert(result.error || 'Gagal menyimpan jawaban', 'error');
               }
            } catch (error) {
               console.error('Error submitting tugas:', error);
               showAlert('Terjadi kesalahan saat menyimpan jawaban', 'error');
            }
         });
      }

      function lihatJawaban(tugasId) {
         const tugas = tugasData.find(t => t.id === tugasId);
         if (tugas) {
            const modal = document.createElement('div');
            modal.className = 'modal-overlay';
            modal.innerHTML = `
               <div class="modal-content">
                  <div class="modal-header">
                     <h3>Jawaban Tugas: ${tugas.judul}</h3>
                     <button class="modal-close" onclick="closeModal()">&times;</button>
                  </div>
                  <div class="modal-body">
                     <p style="color: #666; margin-bottom: 1rem;"><strong>Status:</strong> ${tugas.status.replace('_', ' ')}</p>
                     ${tugas.nilai !== undefined && tugas.nilai !== null ? `<p style="margin-bottom: 1rem;"><span class="nilai-badge">Nilai: ${tugas.nilai}/100</span></p>` : ''}
                     
                     <div style="background: #f8f9ff; padding: 1rem; border-radius: 5px; margin-bottom: 1rem;">
                        <strong>Jawaban Anda:</strong><br>
                        <div style="margin-top: 0.5rem; line-height: 1.5;">${tugas.jawaban || 'Tidak ada jawaban'}</div>
                     </div>
                     
                     ${tugas.feedback ? `
                        <div style="background: #fff8e1; padding: 1rem; border-radius: 5px; border-left: 3px solid #ffc107;">
                           <strong>Feedback Guru:</strong><br>
                           <div style="margin-top: 0.5rem; line-height: 1.5;">${tugas.feedback}</div>
                        </div>
                     ` : ''}
                  </div>
               </div>
            `;
            document.body.appendChild(modal);
         }
      }

      function lihatDetailTugas(tugasId) {
         const tugas = tugasData.find(t => t.id === tugasId);
         if (tugas) {
            const modal = document.createElement('div');
            modal.className = 'modal-overlay';
            modal.innerHTML = `
               <div class="modal-content">
                  <div class="modal-header">
                     <h3>Detail Tugas: ${tugas.judul}</h3>
                     <button class="modal-close" onclick="closeModal()">&times;</button>
                  </div>
                  <div class="modal-body">
                     <div style="margin-bottom: 1rem;">
                        <strong>Materi:</strong> ${tugas.materi_judul}<br>
                        <strong>Deadline:</strong> ${tugas.deadline ? new Date(tugas.deadline).toLocaleDateString('id-ID') : '-'}<br>
                        <strong>Status:</strong> <span class="tugas-status status-${tugas.status}">${tugas.status.replace('_', ' ')}</span>
                     </div>
                     
                     <div style="background: #f8f9ff; padding: 1rem; border-radius: 5px; margin-bottom: 1rem;">
                        <strong>Deskripsi:</strong><br>
                        <div style="margin-top: 0.5rem; line-height: 1.5;">${tugas.deskripsi}</div>
                     </div>
                     
                     <div style="text-align: right;">
                        ${tugas.status === 'belum_dikerjakan' ?
                  `<button class="btn btn-success" onclick="closeModal(); kerjakanTugas(${tugas.id})">Kerjakan Sekarang</button>` :
                  `<button class="btn" onclick="closeModal(); lihatJawaban(${tugas.id})">Lihat Jawaban</button>`
               }
                     </div>
                  </div>
               </div>
            `;
            document.body.appendChild(modal);
         }
      }

      // Diskusi Functions
      function lihatDiskusiMateri(materiId, materiJudul) {
         // This will be handled by switching to diskusi section
         showSection('diskusi');
      }

      async function tambahDiskusiKelas() {
         const isi = prompt('Masukkan isi diskusi kelas:');
         if (!isi || isi.trim().length === 0) return;

         if (isi.trim().length < 5) {
            showAlert('Isi diskusi terlalu pendek (minimal 5 karakter)', 'error');
            return;
         }

         try {
            const result = await apiCall('/siswa/diskusi-kelas', {
               method: 'POST',
               headers: { 'Content-Type': 'application/json' },
               body: JSON.stringify({ isi: isi.trim() })
            });

            if (result.success) {
               showAlert('Diskusi kelas berhasil ditambahkan!');
               loadDiskusiKelas();
            } else {
               showAlert(result.error || 'Gagal menambah diskusi', 'error');
            }
         } catch (error) {
            console.error('Error adding diskusi kelas:', error);
            showAlert('Terjadi kesalahan saat menambah diskusi', 'error');
         }
      }

      async function tambahDiskusiMateri(materiId, materiJudul) {
         // If no materiId provided, show modal to select materi
         if (!materiId) {
            try {
               const result = await apiCall('/siswa/materi');

               if (result.success && result.data.length > 0) {
                  showMateriSelectionModal(result.data);
                  return;
               } else {
                  showAlert('Tidak ada materi yang tersedia', 'error');
                  return;
               }
            } catch (error) {
               showAlert('Gagal memuat daftar materi', 'error');
               return;
            }
         }

         const isi = prompt(`Masukkan komentar untuk materi "${materiJudul}":`);
         if (!isi || isi.trim().length === 0) return;

         if (isi.trim().length < 5) {
            showAlert('Isi diskusi terlalu pendek (minimal 5 karakter)', 'error');
            return;
         }

         try {
            const result = await apiCall('/siswa/diskusi-materi', {
               method: 'POST',
               headers: { 'Content-Type': 'application/json' },
               body: JSON.stringify({
                  materi_id: materiId,
                  isi: isi.trim()
               })
            });

            if (result.success) {
               showAlert('Komentar berhasil ditambahkan!');
               loadDiskusiMateri();
            } else {
               showAlert(result.error || 'Gagal menambah komentar', 'error');
            }
         } catch (error) {
            console.error('Error adding diskusi materi:', error);
            showAlert('Terjadi kesalahan saat menambah komentar', 'error');
         }
      }

      function showMateriSelectionModal(materiList) {
         const modal = document.createElement('div');
         modal.className = 'modal-overlay';
         modal.innerHTML = `
            <div class="modal-content">
               <div class="modal-header">
                  <h3>Pilih Materi untuk Diskusi</h3>
                  <button class="modal-close" onclick="closeModal()">&times;</button>
               </div>
               <div class="modal-body">
                  <form id="materiSelectionForm">
                     <div class="form-group">
                        <label for="materiSelect">Pilih Materi:</label>
                        <select id="materiSelect" name="materi_id" required>
                           <option value="">-- Pilih Materi --</option>
                           ${materiList.map(m => `
                              <option value="${m.id}">${m.judul}</option>
                           `).join('')}
                        </select>
                     </div>
                     <div class="form-group">
                        <label for="diskusiIsi">Komentar/Pertanyaan:</label>
                        <textarea id="diskusiIsi" name="isi" placeholder="Tulis komentar atau pertanyaan Anda..." required></textarea>
                     </div>
                     <div style="text-align: right; margin-top: 1rem;">
                        <button type="button" onclick="closeModal()" style="margin-right: 10px; background: #95a5a6; color: white; border: none; padding: 0.5rem 1rem; border-radius: 5px; cursor: pointer;">Batal</button>
                        <button type="submit" class="btn">Kirim</button>
                     </div>
                  </form>
               </div>
            </div>
         `;
         document.body.appendChild(modal);

         // Handle form submission
         document.getElementById('materiSelectionForm').addEventListener('submit', async function (e) {
            e.preventDefault();
            const materiId = document.getElementById('materiSelect').value;
            const isi = document.getElementById('diskusiIsi').value;

            if (!materiId || !isi.trim()) {
               showAlert('Harap pilih materi dan isi komentar', 'error');
               return;
            }

            if (isi.trim().length < 5) {
               showAlert('Isi diskusi terlalu pendek (minimal 5 karakter)', 'error');
               return;
            }

            try {
               const result = await apiCall('/siswa/diskusi-materi', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({
                     materi_id: parseInt(materiId),
                     isi: isi.trim()
                  })
               });

               if (result.success) {
                  showAlert('Komentar berhasil ditambahkan!');
                  closeModal();
                  loadDiskusiMateri();
               } else {
                  showAlert(result.error || 'Gagal menambah komentar', 'error');
               }
            } catch (error) {
               console.error('Error adding diskusi:', error);
               showAlert('Terjadi kesalahan saat menambah komentar', 'error');
            }
         });
      }

      // Utility Functions
      function closeModal() {
         const modal = document.querySelector('.modal-overlay');
         if (modal) {
            modal.remove();
         }
      }

      async function logout() {
         try {
            await fetch('/logout', {
               method: 'POST',
               credentials: 'include'
            });
            window.location.href = '/login';
         } catch (error) {
            console.error('Logout error:', error);
            window.location.href = '/login';
         }
      }

      // Event Listeners
      document.addEventListener('DOMContentLoaded', function () {
         // Load initial data
         loadDashboardData();
      });

      // Close modal when clicking overlay
      document.addEventListener('click', function (e) {
         if (e.target.classList.contains('modal-overlay')) {
            closeModal();
         }
      });

      // Handle escape key to close modal
      document.addEventListener('keydown', function (e) {
         if (e.key === 'Escape') {
            closeModal();
         }
      });
   </script>
</body>

</html>